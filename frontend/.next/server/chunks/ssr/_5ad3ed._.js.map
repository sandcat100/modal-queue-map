{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/margaret/modal-queue-map/frontend/convex/_generated/api.js"],"sourcesContent":["/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport { anyApi } from \"convex/server\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\nexport const api = anyApi;\nexport const internal = anyApi;\n"],"names":[],"mappings":"AAAA,kBAAkB,GAClB;;;;;;;CAOC;;;;AAED;AAAA;;AAUO,MAAM,MAAM,sJAAA,CAAA,SAAM;AAClB,MAAM,WAAW,sJAAA,CAAA,SAAM"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///Users/margaret/modal-queue-map/frontend/components/heatmap.jsx"],"sourcesContent":["import * as d3 from \"d3\"\nimport { useMemo } from \"react\"\n\nconst MARGIN = { top: 10, right: 10, bottom: 30, left: 30 };\n\nexport default function Heatmap(props) {\n\n    const boundsWidth = props.width - MARGIN.right - MARGIN.left;\n    const boundsHeight = props.height - MARGIN.top - MARGIN.bottom;\n\n    const yAxisElements = [\"H100\", \"A100-80GB\", \"A100\", \"L40S\", \"A10G\", \"L4\", \"T4\"]    \n    const xAxisElements = useMemo(() => [...new Set(props.data.map((d) => d.time))], [props.data])\n\n    const yScale = useMemo(() => {\n        return d3\n          .scaleBand()\n          .range([0, boundsHeight])\n          .domain(yAxisElements)\n          .padding(0.01);\n    }, [props.data, props.width]);\n\n    const xScale = useMemo(() => {\n        return d3\n          .scaleBand()\n          .range([0, boundsWidth])\n          .domain(xAxisElements)\n          .padding(0.01);\n    }, [props.data, props.width]);\n    \n    const yLabels = yAxisElements.map((name, i) => {\n        const yPos = yScale(name) ?? 0;\n        console.log(name)\n        return (\n            <text\n            key={i}\n            x={-5}\n            y={yPos + yScale.bandwidth() / 2}\n            textAnchor=\"end\"\n            dominantBaseline=\"middle\"\n            fontSize={10}\n            >\n            {name}\n            </text>\n        );\n    });\n\n    const xLabels = xAxisElements.map((name, i) => {\n        const xPos = xScale(name) ?? 0;\n\n        const dt_element = new Date(name * 1000)\n        const date_formatted = `${dt_element.getMonth() + 1}/${dt_element.getDate()} ${dt_element.getHours()}:${String(dt_element.getMinutes()).padStart(2, '0')}`\n\n        return (\n            <text\n            key={i}\n            x={xPos + xScale.bandwidth() / 2}\n            y={boundsHeight + 10}\n            textAnchor=\"middle\"\n            dominantBaseline=\"middle\"\n            fontSize={10}\n            >\n            {date_formatted}\n            </text>\n        );\n    });\n\n    const colorScale = d3\n        .scaleSequential()\n        .interpolator(d3.interpolateRdYlGn)\n        .domain([10, 0]);\n\n    const allRects = props.data.map((d, i) => {\n        if (d.value === null) {\n            return;\n        }\n        return (\n            <rect\n            key={i}\n            x={xScale(d.time)}\n            y={yScale(d.resource_type)}\n            width={xScale.bandwidth()}\n            height={yScale.bandwidth()}\n            fill={colorScale(d.value)}\n            />\n        );\n    });\n\n    return (\n        <div>\n            <svg width={props.width} height={props.height}>\n                <g\n                    width={boundsWidth}\n                    height={boundsHeight}\n                    transform={`translate(${[MARGIN.left, MARGIN.top].join(\",\")})`}\n                >\n                {allRects}\n                {xLabels}\n                {yLabels}\n                </g>\n            </svg>\n        </div>\n    )\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;;AAGA,MAAM,SAAS;IAAE,KAAK;IAAI,OAAO;IAAI,QAAQ;IAAI,MAAM;AAAG;AAE3C,SAAS,QAAQ,KAAK;IAEjC,MAAM,cAAc,MAAM,KAAK,GAAG,OAAO,KAAK,GAAG,OAAO,IAAI;IAC5D,MAAM,eAAe,MAAM,MAAM,GAAG,OAAO,GAAG,GAAG,OAAO,MAAM;IAE9D,MAAM,gBAAgB;QAAC;QAAQ;QAAa;QAAQ;QAAQ;QAAQ;QAAM;KAAK;IAC/E,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM;eAAI,IAAI,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;SAAG,EAAE;QAAC,MAAM,IAAI;KAAC;IAE7F,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACnB,OAAO,mIACJ,SAAS,GACT,KAAK,CAAC;YAAC;YAAG;SAAa,EACvB,MAAM,CAAC,eACP,OAAO,CAAC;IACf,GAAG;QAAC,MAAM,IAAI;QAAE,MAAM,KAAK;KAAC;IAE5B,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACnB,OAAO,mIACJ,SAAS,GACT,KAAK,CAAC;YAAC;YAAG;SAAY,EACtB,MAAM,CAAC,eACP,OAAO,CAAC;IACf,GAAG;QAAC,MAAM,IAAI;QAAE,MAAM,KAAK;KAAC;IAE5B,MAAM,UAAU,cAAc,GAAG,CAAC,CAAC,MAAM;QACrC,MAAM,OAAO,OAAO,SAAS;QAC7B,QAAQ,GAAG,CAAC;QACZ,qBACI,8OAAC;YAED,GAAG,CAAC;YACJ,GAAG,OAAO,OAAO,SAAS,KAAK;YAC/B,YAAW;YACX,kBAAiB;YACjB,UAAU;sBAET;WAPI;;;;;IAUb;IAEA,MAAM,UAAU,cAAc,GAAG,CAAC,CAAC,MAAM;QACrC,MAAM,OAAO,OAAO,SAAS;QAE7B,MAAM,aAAa,IAAI,KAAK,OAAO;QACnC,MAAM,iBAAiB,GAAG,WAAW,QAAQ,KAAK,EAAE,CAAC,EAAE,WAAW,OAAO,GAAG,CAAC,EAAE,WAAW,QAAQ,GAAG,CAAC,EAAE,OAAO,WAAW,UAAU,IAAI,QAAQ,CAAC,GAAG,MAAM;QAE1J,qBACI,8OAAC;YAED,GAAG,OAAO,OAAO,SAAS,KAAK;YAC/B,GAAG,eAAe;YAClB,YAAW;YACX,kBAAiB;YACjB,UAAU;sBAET;WAPI;;;;;IAUb;IAEA,MAAM,aAAa,mIACd,eAAe,GACf,YAAY,CAAC,mIAAG,iBAAiB,EACjC,MAAM,CAAC;QAAC;QAAI;KAAE;IAEnB,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG;QAChC,IAAI,EAAE,KAAK,KAAK,MAAM;YAClB;QACJ;QACA,qBACI,8OAAC;YAED,GAAG,OAAO,EAAE,IAAI;YAChB,GAAG,OAAO,EAAE,aAAa;YACzB,OAAO,OAAO,SAAS;YACvB,QAAQ,OAAO,SAAS;YACxB,MAAM,WAAW,EAAE,KAAK;WALnB;;;;;IAQb;IAEA,qBACI,8OAAC;kBACG,cAAA,8OAAC;YAAI,OAAO,MAAM,KAAK;YAAE,QAAQ,MAAM,MAAM;sBACzC,cAAA,8OAAC;gBACG,OAAO;gBACP,QAAQ;gBACR,WAAW,CAAC,UAAU,EAAE;oBAAC,OAAO,IAAI;oBAAE,OAAO,GAAG;iBAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;oBAEjE;oBACA;oBACA;;;;;;;;;;;;;;;;;AAKjB"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///Users/margaret/modal-queue-map/frontend/app/page.jsx"],"sourcesContent":["\"use client\";\n\nimport { useQuery } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nimport Image from \"next/image\"\nimport Heatmap from \"../components/heatmap\"\n\nlet sample_data = [\n  {\n      \"resource_type\": \"H100\",\n      \"time\": 1,\n      \"value\": 0.2\n  },\n  {\n      \"resource_type\": \"H100\",\n      \"time\": 2,\n      \"value\": 6\n  },\n  {\n      \"resource_type\": \"H100\",\n      \"time\": 3,\n      \"value\": 0.3\n  },\n  {\n      \"resource_type\": \"A100\",\n      \"time\": 1,\n      \"value\": 0.1\n  },\n  {\n      \"resource_type\": \"A100\",\n      \"time\": 2,\n      \"value\": 1.3\n  },\n  {\n      \"resource_type\": \"A100\",\n      \"time\": 3,\n      \"value\": 1.4\n  },\n]\n\nexport default function Home() {\n  const queue_times = useQuery(api.queue_times.get)\n  \n  return (\n    <main>\n      <h1>How fast can you get a GPU on Modal?</h1>\n      <div className=\"heatmap-container\">\n        {queue_times && <Heatmap\n          width={1500}\n          height={500}\n          data={queue_times}\n        />\n        }\n      </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AACA;AAJA;AAFA;;;;;;AAQA,IAAI,cAAc;IAChB;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;IACA;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;IACA;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;IACA;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;IACA;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;IACA;QACI,iBAAiB;QACjB,QAAQ;QACR,SAAS;IACb;CACD;AAEc,SAAS;IACtB,MAAM,cAAc,CAAA,GAAA,wJAAA,CAAA,WAAQ,AAAD,EAAE,2HAAA,CAAA,MAAG,CAAC,WAAW,CAAC,GAAG;IAEhD,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;0BACJ,8OAAC;gBAAI,WAAU;0BACZ,6BAAe,8OAAC,sHAAA,CAAA,UAAO;oBACtB,OAAO;oBACP,QAAQ;oBACR,MAAM;;;;;;;;;;;;;;;;;AAMhB"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}